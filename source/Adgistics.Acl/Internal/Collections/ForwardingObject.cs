namespace Modules.Acl.Internal.Collections
{
    /// <summary>
    ///   An abstract base class for implementing the decorator pattern. 
    ///   The ForwardTo() method must be overridden to return the instance 
    ///   being decorated.
    /// </summary>
    /// 
    /// <remarks>
    /// <para>
    ///   This class does not forward the <c>GetHashCode</c> 
    ///   and <c>Equals</c> methods through to the backing object, but relies 
    ///   on Object's implementation. This is necessary to preserve the 
    ///   symmetry of equals. Custom definitions of equality are usually based 
    ///   on an interface, such as Collection or List, so that the 
    ///   implementation of equals can cast the object being tested for 
    ///   equality to the interface. <c>ForwardingObject</c> implements no such 
    ///   custom interfaces directly; they are implemented only in subclasses. 
    ///   Therefore, forwarding equals would break symmetry, as the forwarding 
    ///   object might consider itself equal to the object being tested, but 
    ///   the reverse could not be true. Use an interface-specific subclass of 
    ///   <c>ForwardingObject</c>, such as <c>ForwardingList</c>, to preserve 
    ///   equality behavior, or override equals directly.
    /// </para>
    /// <para>
    ///   The toString method is forwarded to the delegate.
    /// </para>
    /// </remarks>
    /// 
    /// <typeparam name="T">
    ///   The type of element to delegate to.
    /// </typeparam>
    /// 
    /// <since version="1.0"/>
    internal abstract class ForwardingObject<T>
    {
        #region Constructors

        /// <summary>
        ///   Constructor for use by subclasses.
        /// </summary>
        protected ForwardingObject()
        {
            // Empty Block;
        }

        #endregion Constructors

        #region Methods

        /// <summary>
        ///   Returns the string representation generated by the delegate's 
        ///   <c>ToString()</c> method.
        /// </summary>
        /// 
        /// <returns>
        ///   The string representation generated by the delegate's 
        ///   <c>ToString</c> method.
        /// </returns>
        public override string ToString()
        {
            return ForwardTo().ToString();
        }

        /// <summary>
        ///   Returns the backing delegate instance that methods are 
        ///   forwarded to.
        /// </summary>
        /// 
        /// <remarks>
        /// <para>
        ///   Abstract subclasses generally override this method with an 
        ///   abstract method that has a more specific return type, such as 
        ///   <c>ForwardingList.ForwardTo()</c>. 
        ///   Concrete subclasses override this method to supply the instance 
        ///   being decorated.
        /// </para>
        /// </remarks>
        /// 
        /// <returns>
        ///   The backing delegate instance that methods are forwarded to.
        /// </returns>
        protected abstract T ForwardTo();

        #endregion Methods
    }
}